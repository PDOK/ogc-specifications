---
run:
  # Timeout for analysis.
  timeout: 5m

  # Modules download mode (do not modify go.mod)
  module-download-mode: readonly

  # Include test files (see below to exclude certain linters)
  tests: true

issues:
  exclude-rules:
    # Exclude certain linters for test code
    - path: "_test\\.go"
      linters:
        - bodyclose
        - dupl
        - dogsled
        - funlen
        - gosec

output:
  formats: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  depguard:
    rules:
      main:
        # Packages that are not allowed where the value is a suggestion.
        deny:
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package
  cyclop:
    # The maximal code complexity to report.
    max-complexity: 15
    skip-tests: true
  funlen:
    lines: 100
  nestif:
    min-complexity: 6
  forbidigo:
    forbid:
      - http\.NotFound.*  # return RFC 7807 problem details instead
      - http\.Error.*  # return RFC 7807 problem details instead
  gomoddirectives:
    replace-allow-list:
      - github.com/abbot/go-http-auth  # https://github.com/traefik/traefik/issues/6873#issuecomment-637654361

linters:
  disable-all: true
  enable:
    # enabled by default by golangci-lint
    - errcheck  # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gosimple  # specializes in simplifying a code
    - govet  # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign  # detects when assignments to existing variables are not used
    - staticcheck  # is a go vet on steroids, applying a ton of static analysis checks
    - typecheck  # like the front-end of a Go compiler, parses and type-checks Go code
    - unused  # checks for unused constants, variables, functions and types
    # extra enabled by us
    - asasalint  # checks for pass []any as any in variadic func(...any)
    - asciicheck  # checks that your code does not contain non-ASCII identifiers
    - bidichk  # checks for dangerous unicode character sequences
    - bodyclose  # checks whether HTTP response body is closed successfully
    - cyclop  # checks function and package cyclomatic complexity
    - dupl  # tool for code clone detection
    - durationcheck  # checks for two durations multiplied together
    - dogsled  # find assignments/declarations with too many blank identifiers
    - errname  # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint  # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - exhaustive  # checks exhaustiveness of enum switch statements
    - exptostd  # detects functions from golang.org/x/exp/ that can be replaced by std functions
    - copyloopvar  # checks for pointers to enclosing loop variables
    - fatcontext  # detects nested contexts in loops and function literals
    - forbidigo  # forbids identifiers
    - funlen  # tool for detection of long functions
    - gocheckcompilerdirectives  # validates go compiler directive comments (//go:)
    - goconst  # finds repeated strings that could be replaced by a constant
    - gocritic  # provides diagnostics that check for bugs, performance and style issues
    - gofmt  # checks if the code is formatted according to 'gofmt' command
    - goimports  # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomoddirectives  # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard  # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname  # checks that printf-like functions are named with f at the end
    - gosec  # inspects source code for security problems
    - loggercheck  # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero  # finds slice declarations with non-zero initial length
    - mirror  # reports wrong mirror patterns of bytes/strings usage
    - misspell  # finds commonly misspelled English words
    - nakedret  # finds naked returns in functions greater than a specified function length
    - nestif  # reports deeply nested if statements
    - nilerr  # finds the code that returns nil even if it checks that the error is not nil
    - nolintlint  # reports ill-formed or insufficient nolint directives
    - nosprintfhostport  # checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint  # Golang linter for performance, aiming at usages of fmt.Sprintf which have faster alternatives
    - predeclared  # finds code that shadows one of Go's predeclared identifiers
    - promlinter  # checks Prometheus metrics naming via promlint
    - reassign  # checks that package variables are not reassigned
    - revive  # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck  # checks whether Err of rows is checked successfully
    - sqlclosecheck  # checks that sql.Rows and sql.Stmt are closed
    - sloglint  # A Go linter that ensures consistent code style when using log/slog
    - tagliatelle  # checks the struct tags.
    - testableexamples  # checks if examples are testable (have an expected output)
    - tparallel  # detects inappropriate usage of t.Parallel() method in your Go test codes
    - usetesting  # detects using os.Setenv instead of t.Setenv since Go1.17
    - unconvert  # removes unnecessary type conversions
    - unparam  # reports unused function parameters
    - usestdlibvars  # detects the possibility to use variables/constants from the Go standard library
    - wastedassign  # finds wasted assignment statements
  fast: false